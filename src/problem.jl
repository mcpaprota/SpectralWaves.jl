# SPDX-License-Identifier: MIT

"""
    Problem(‚Ñì::Number, d::Number, ‚Ñê::Integer, t::AbstractRange{<:Number}; O = 4, M_s = 0, M_b = 0, static_bottom = true)

Construct an IBV Problem object corresponding to a fluid domain of length `‚Ñì` and depth `d`
with `‚Ñê` harmonics and `N` time steps.

Output is a Problem object with fields:
- `‚Ñì` is the fluid domain length (m),
- `d` is the water depth (m),
- `‚Ñê` is the number of harmonics,
- `t` is the time range,
- `Œît` is the time step (s),
- `N` is the number of time steps,
- `O` is the order of the time-stepping scheme,
- `Œ∫` are wave numbers (rad/m),
- `Œ∑ÃÇ` are free-surface elevation amplitudes (m),
- `Œ∑Ãá` are free-surface vertical velocity amplitudes (m/s),
- `Œ≤ÃÇ` are bottom-surface elevation amplitudes (m),
- `Œ≤Ãá` are bottom-surface vertical velocity amplitudes (m/s),
- `œïÃÇ` are flat-bottom velocity potential amplitudes (m¬≤/s),
- `œïÃá` are flat-bottom acceleration potential amplitudes (m¬≤/s¬≤),
- `œàÃÇ` are uneven-bottom velocity potential amplitudes (m¬≤/s),
- `œàÃá` are uneven-bottom acceleration potential amplitudes (m¬≤/s¬≤),
- `pÃÇ` are surface pressure head amplitudes (m),
- `œá` is wavemaker paddle displacement (m),
- `Œæ` is wavemaker paddle velocity (m/s),
- `Œ∂` is wavemaker paddle acceleration (m/s¬≤),
- `ùíØ` are hyperbolic tangent lookup values,
- `ùíÆ` are hyperbolic secant lookup values,
- `static_bottom` is a boolean flag to indicate if the bottom is static.

"""
struct Problem
    ‚Ñì::Number
    d::Number
    ‚Ñê::Integer
    t::AbstractRange{<:Number}
    Œît::Number
    N::Integer
    O::Integer
    M_s::Integer
    M_b::Integer
    F::Vector{Number}
    Œ∫::AbstractRange{<:Number}
    Œ∑ÃÇ::Matrix{Complex}
    Œ∑Ãá::Matrix{Complex}
    Œ≤ÃÇ::Matrix{Complex}
    Œ≤Ãá::Matrix{Complex}
    œïÃÇ::Matrix{Complex}
    œïÃá::Matrix{Complex}
    œàÃÇ::Matrix{Complex}
    œàÃá::Matrix{Complex}
    pÃÇ::Matrix{Complex}
    œá::Vector{Number}
    Œæ::Vector{Number}
    Œ∂::Vector{Number}
    ùíØ::Vector{Number}
    ùíÆ::Vector{Number}
    static_bottom::Bool
    function Problem(‚Ñì::Number, d::Number, ‚Ñê::Integer, t::AbstractRange{<:Number}; O = 4, M_s = 0, M_b = 0, static_bottom = true)
        N = length(t) - 1
        Œît = step(t)
        F = factorial_lookup(max(M_s, M_b))
        Œ∫ = 2œÄ / ‚Ñì * (-‚Ñê:‚Ñê)
        Œ∑ÃÇ = complex(zeros(2‚Ñê + 1, N+O))
        Œ∑Ãá = complex(zeros(2‚Ñê + 1, N+O))
        if static_bottom
            Œ≤ÃÇ = complex(zeros(2‚Ñê + 1, 1))
        else
            Œ≤ÃÇ = complex(zeros(2‚Ñê + 1, N+O))
        end
        Œ≤Ãá = complex(zeros(2‚Ñê + 1, N+O))
        œïÃÇ = complex(zeros(2‚Ñê + 1, N+O))
        œïÃá = complex(zeros(2‚Ñê + 1, N+O))
        œàÃÇ = complex(zeros(2‚Ñê + 1, N+O))
        œàÃá = complex(zeros(2‚Ñê + 1, N+O))
        pÃÇ = complex(zeros(2‚Ñê + 1, N+O))
        œá = zeros(N+O)
        Œæ = zeros(N+O)
        Œ∂ = zeros(N+O)
        ùíØ = tanh.(Œ∫ * d)
        ùíÆ = sech.(Œ∫ * d)
        new(‚Ñì, d, ‚Ñê, t, Œît, N, O, M_s, M_b, F, Œ∫, Œ∑ÃÇ, Œ∑Ãá, Œ≤ÃÇ, Œ≤Ãá, œïÃÇ, œïÃá, œàÃÇ, œàÃá, pÃÇ, œá, Œæ, Œ∂, ùíØ, ùíÆ, static_bottom)
    end
end

"""
    init_nonlinear_surface_boundary_condition(Œ∫, ùíØ, ùíÆ, ‚Ñê, M)

Initialize expansion coefficients for nonlinear free-surface boundary conditions
for eigenvalues `Œ∫`, hyperbolic tangent `ùíØ` and secant `ùíÆ` values,
number of harmonics `‚Ñê` and order of nonlinear expansion `M`.

Output is a tuple `(Œ¶Ãá‚Ä≤, Œ¶Ãá‚Ä≥, Œ¶ÃÇ‚Ä≤, Œ¶ÃÇ‚Ä≥, Œ¶ÃÉ‚Ä≤, Œ¶ÃÉ‚Ä≥)`, where:
- `Œ¶Ãá‚Ä≤` are surface-potential-amplitude dependent expansion coefficients and
- `Œ¶Ãá‚Ä≥` are bottom-potential-amplitude dependent expansion coefficients for computing
surface acceleration potential amplitudes and its vertical gradients,
- `Œ¶ÃÇ‚Ä≤` are surface-potential-amplitude dependent expansion coefficients and
- `Œ¶ÃÇ‚Ä≥` are bottom-potential-amplitude dependent expansion coefficients for computing
surface velocity potential amplitudes and its vertical gradients,
- `Œ¶ÃÉ‚Ä≤` are surface-potential-amplitude dependent expansion coefficients and
- `Œ¶ÃÉ‚Ä≥` are bottom-potential-amplitude dependent expansion coefficients for computing
surface horizontal velocity potential amplitudes and its vertical gradients.

"""
function init_nonlinear_surface_boundary_condition(Œ∫, ùíØ, ùíÆ, ‚Ñê, M)
    Œ¶Ãá‚Ä≤ = zeros(2‚Ñê + 1, M + 1)
    Œ¶Ãá‚Ä≥ = zeros(2‚Ñê + 1, M + 1)
    Œ¶ÃÇ‚Ä≤ = zeros(2‚Ñê + 1, M + 1)
    Œ¶ÃÇ‚Ä≥ = zeros(2‚Ñê + 1, M + 1)
    Œ¶ÃÉ‚Ä≤ = complex(zeros(2‚Ñê + 1, M + 1))
    Œ¶ÃÉ‚Ä≥ = complex(zeros(2‚Ñê + 1, M + 1))
    for m in 0:M
        Œ¶Ãá‚Ä≤[:, m + 1] = iseven(m) ? Œ∫ .^ m : Œ∫ .^ m .* ùíØ
        Œ¶Ãá‚Ä≥[:, m + 1] = iseven(m) ? zero(Œ∫) : Œ∫ .^ (m - 1) .* ùíÆ
        Œ¶ÃÇ‚Ä≤[:, m + 1] = iseven(m) ? Œ∫ .^ (m + 1) .* ùíØ : Œ∫ .^ (m + 1)
        Œ¶ÃÇ‚Ä≥[:, m + 1] = iseven(m) ? Œ∫ .^ m .* ùíÆ : zero(Œ∫)
        Œ¶ÃÉ‚Ä≤[:, m + 1] = (iseven(m) ? Œ∫ .^ (m + 1) : Œ∫ .^ (m + 1) .* ùíØ) * im
        Œ¶ÃÉ‚Ä≥[:, m + 1] = (iseven(m) ? zero(Œ∫) : Œ∫ .^ m .* ùíÆ) * im
    end
    return Œ¶Ãá‚Ä≤, Œ¶Ãá‚Ä≥, Œ¶ÃÇ‚Ä≤, Œ¶ÃÇ‚Ä≥, Œ¶ÃÉ‚Ä≤, Œ¶ÃÉ‚Ä≥
end

"""
    init_nonlinear_bottom_boundary_condition(Œ∫, ùíØ, ùíÆ, ‚Ñê, M)

Initialize expansion coefficients for nonlinear bottom boundary conditions
for eigenvalues `Œ∫`, hyperbolic tangent `ùíØ` and secant `ùíÆ` values,
number of harmonics `‚Ñê` and order of nonlinear expansion `M`.

Output is a tuple `(Œ®ÃÇ‚Ä≤, Œ®ÃÇ‚Ä≥, Œ®ÃÉ‚Ä≤, Œ®ÃÉ‚Ä≥)`, where:
- `Œ®ÃÇ‚Ä≤` are surface-potential-amplitude dependent expansion coefficients and
- `Œ®ÃÇ‚Ä≥` are bottom-potential-amplitude dependent expansion coefficients for computing bottom velocity potential amplitudes and its vertical gradients,
- `Œ®ÃÉ‚Ä≤` are surface-potential-amplitude dependent expansion coefficients and
- `Œ®ÃÉ‚Ä≥` are bottom-potential-amplitude dependent expansion coefficients for computing bottom horizontal velocity potential amplitudes and its vertical gradients.

"""
function init_nonlinear_bottom_boundary_condition(Œ∫, ùíØ, ùíÆ, ‚Ñê, M)
    A‚Ä≤ = complex(zeros(2‚Ñê + 1, 2‚Ñê + 1))
    A‚Ä≥ = complex(zeros(2‚Ñê + 1, 2‚Ñê + 1))
    Œ®ÃÇ‚Ä≤ = zeros(2‚Ñê + 1, M + 1)
    Œ®ÃÇ‚Ä≥ = zeros(2‚Ñê + 1, M + 1)
    Œ®ÃÉ‚Ä≤ = complex(zeros(2‚Ñê + 1, M + 1))
    Œ®ÃÉ‚Ä≥ = complex(zeros(2‚Ñê + 1, M + 1))
    w‚Ä≤ = complex(zeros(4‚Ñê + 1))
    for m in 0:M
        Œ®ÃÇ‚Ä≤[:, m+1] = iseven(m) ? zero(Œ∫) : Œ∫ .^ (m + 1) .* ùíÆ
        Œ®ÃÇ‚Ä≥[:, m+1] = iseven(m) ? Œ∫ .^ m : -(Œ∫ .^ m) .* ùíØ
        Œ®ÃÉ‚Ä≤[:, m+1] = (iseven(m) ? Œ∫ .^ (m + 1) .* ùíÆ : zero(Œ∫)) * im
        Œ®ÃÉ‚Ä≥[:, m+1] = (iseven(m) ? -(Œ∫ .^ m) .* ùíØ : Œ∫ .^ m) * im
    end
    return A‚Ä≤, A‚Ä≥, Œ®ÃÇ‚Ä≤, Œ®ÃÇ‚Ä≥, Œ®ÃÉ‚Ä≤, Œ®ÃÉ‚Ä≥, w‚Ä≤
end
